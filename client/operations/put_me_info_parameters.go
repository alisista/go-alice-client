// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/alisista/go-alis-client/models"
)

// NewPutMeInfoParams creates a new PutMeInfoParams object
// with the default values initialized.
func NewPutMeInfoParams() *PutMeInfoParams {
	var ()
	return &PutMeInfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutMeInfoParamsWithTimeout creates a new PutMeInfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutMeInfoParamsWithTimeout(timeout time.Duration) *PutMeInfoParams {
	var ()
	return &PutMeInfoParams{

		timeout: timeout,
	}
}

// NewPutMeInfoParamsWithContext creates a new PutMeInfoParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutMeInfoParamsWithContext(ctx context.Context) *PutMeInfoParams {
	var ()
	return &PutMeInfoParams{

		Context: ctx,
	}
}

// NewPutMeInfoParamsWithHTTPClient creates a new PutMeInfoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutMeInfoParamsWithHTTPClient(client *http.Client) *PutMeInfoParams {
	var ()
	return &PutMeInfoParams{
		HTTPClient: client,
	}
}

/*PutMeInfoParams contains all the parameters to send to the API endpoint
for the put me info operation typically these are written to a http.Request
*/
type PutMeInfoParams struct {

	/*UserInfo
	  user info object

	*/
	UserInfo *models.MeInfoUpdate

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put me info params
func (o *PutMeInfoParams) WithTimeout(timeout time.Duration) *PutMeInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put me info params
func (o *PutMeInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put me info params
func (o *PutMeInfoParams) WithContext(ctx context.Context) *PutMeInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put me info params
func (o *PutMeInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put me info params
func (o *PutMeInfoParams) WithHTTPClient(client *http.Client) *PutMeInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put me info params
func (o *PutMeInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserInfo adds the userInfo to the put me info params
func (o *PutMeInfoParams) WithUserInfo(userInfo *models.MeInfoUpdate) *PutMeInfoParams {
	o.SetUserInfo(userInfo)
	return o
}

// SetUserInfo adds the userInfo to the put me info params
func (o *PutMeInfoParams) SetUserInfo(userInfo *models.MeInfoUpdate) {
	o.UserInfo = userInfo
}

// WriteToRequest writes these params to a swagger request
func (o *PutMeInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserInfo != nil {
		if err := r.SetBodyParam(o.UserInfo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
