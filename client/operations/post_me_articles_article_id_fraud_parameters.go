// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostMeArticlesArticleIDFraudParams creates a new PostMeArticlesArticleIDFraudParams object
// with the default values initialized.
func NewPostMeArticlesArticleIDFraudParams() *PostMeArticlesArticleIDFraudParams {
	var ()
	return &PostMeArticlesArticleIDFraudParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostMeArticlesArticleIDFraudParamsWithTimeout creates a new PostMeArticlesArticleIDFraudParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostMeArticlesArticleIDFraudParamsWithTimeout(timeout time.Duration) *PostMeArticlesArticleIDFraudParams {
	var ()
	return &PostMeArticlesArticleIDFraudParams{

		timeout: timeout,
	}
}

// NewPostMeArticlesArticleIDFraudParamsWithContext creates a new PostMeArticlesArticleIDFraudParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostMeArticlesArticleIDFraudParamsWithContext(ctx context.Context) *PostMeArticlesArticleIDFraudParams {
	var ()
	return &PostMeArticlesArticleIDFraudParams{

		Context: ctx,
	}
}

// NewPostMeArticlesArticleIDFraudParamsWithHTTPClient creates a new PostMeArticlesArticleIDFraudParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostMeArticlesArticleIDFraudParamsWithHTTPClient(client *http.Client) *PostMeArticlesArticleIDFraudParams {
	var ()
	return &PostMeArticlesArticleIDFraudParams{
		HTTPClient: client,
	}
}

/*PostMeArticlesArticleIDFraudParams contains all the parameters to send to the API endpoint
for the post me articles article ID fraud operation typically these are written to a http.Request
*/
type PostMeArticlesArticleIDFraudParams struct {

	/*ArticleID
	  対象記事の指定するために使用

	*/
	ArticleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) WithTimeout(timeout time.Duration) *PostMeArticlesArticleIDFraudParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) WithContext(ctx context.Context) *PostMeArticlesArticleIDFraudParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) WithHTTPClient(client *http.Client) *PostMeArticlesArticleIDFraudParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArticleID adds the articleID to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) WithArticleID(articleID string) *PostMeArticlesArticleIDFraudParams {
	o.SetArticleID(articleID)
	return o
}

// SetArticleID adds the articleId to the post me articles article ID fraud params
func (o *PostMeArticlesArticleIDFraudParams) SetArticleID(articleID string) {
	o.ArticleID = articleID
}

// WriteToRequest writes these params to a swagger request
func (o *PostMeArticlesArticleIDFraudParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param article_id
	if err := r.SetPathParam("article_id", o.ArticleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
