// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetMeArticlesArticleIDCommentsLikesReader is a Reader for the GetMeArticlesArticleIDCommentsLikes structure.
type GetMeArticlesArticleIDCommentsLikesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMeArticlesArticleIDCommentsLikesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMeArticlesArticleIDCommentsLikesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMeArticlesArticleIDCommentsLikesOK creates a GetMeArticlesArticleIDCommentsLikesOK with default headers values
func NewGetMeArticlesArticleIDCommentsLikesOK() *GetMeArticlesArticleIDCommentsLikesOK {
	return &GetMeArticlesArticleIDCommentsLikesOK{}
}

/*GetMeArticlesArticleIDCommentsLikesOK handles this case with default header values.

いいねを実施したコメントのIDの一覧
*/
type GetMeArticlesArticleIDCommentsLikesOK struct {
	Payload *GetMeArticlesArticleIDCommentsLikesOKBody
}

func (o *GetMeArticlesArticleIDCommentsLikesOK) Error() string {
	return fmt.Sprintf("[GET /me/articles/{article_id}/comments/likes][%d] getMeArticlesArticleIdCommentsLikesOK  %+v", 200, o.Payload)
}

func (o *GetMeArticlesArticleIDCommentsLikesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMeArticlesArticleIDCommentsLikesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetMeArticlesArticleIDCommentsLikesOKBody get me articles article ID comments likes o k body
swagger:model GetMeArticlesArticleIDCommentsLikesOKBody
*/
type GetMeArticlesArticleIDCommentsLikesOKBody struct {

	// comment ids
	CommentIds []string `json:"comment_ids"`
}

// Validate validates this get me articles article ID comments likes o k body
func (o *GetMeArticlesArticleIDCommentsLikesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommentIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getMeArticlesArticleIdCommentsLikesOKBodyCommentIdsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["comment_id"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getMeArticlesArticleIdCommentsLikesOKBodyCommentIdsItemsEnum = append(getMeArticlesArticleIdCommentsLikesOKBodyCommentIdsItemsEnum, v)
	}
}

func (o *GetMeArticlesArticleIDCommentsLikesOKBody) validateCommentIdsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getMeArticlesArticleIdCommentsLikesOKBodyCommentIdsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (o *GetMeArticlesArticleIDCommentsLikesOKBody) validateCommentIds(formats strfmt.Registry) error {

	if swag.IsZero(o.CommentIds) { // not required
		return nil
	}

	for i := 0; i < len(o.CommentIds); i++ {

		// value enum
		if err := o.validateCommentIdsItemsEnum("getMeArticlesArticleIdCommentsLikesOK"+"."+"comment_ids"+"."+strconv.Itoa(i), "body", o.CommentIds[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMeArticlesArticleIDCommentsLikesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMeArticlesArticleIDCommentsLikesOKBody) UnmarshalBinary(b []byte) error {
	var res GetMeArticlesArticleIDCommentsLikesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
