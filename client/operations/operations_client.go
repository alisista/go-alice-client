// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteMeCommentsCommentID 指定されたコメントを削除する
*/
func (a *Client) DeleteMeCommentsCommentID(params *DeleteMeCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeCommentsCommentID",
		Method:             "DELETE",
		PathPattern:        "/me/comments/{comment_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeCommentsCommentIDOK), nil

}

/*
GetArticlesArticleID 指定されたarticle_idの記事情報を取得
*/
func (a *Client) GetArticlesArticleID(params *GetArticlesArticleIDParams) (*GetArticlesArticleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArticlesArticleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetArticlesArticleID",
		Method:             "GET",
		PathPattern:        "/articles/{article_id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArticlesArticleIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArticlesArticleIDOK), nil

}

/*
GetArticlesArticleIDAlistoken 指定された article_id のALISトークン数を取得
*/
func (a *Client) GetArticlesArticleIDAlistoken(params *GetArticlesArticleIDAlistokenParams) (*GetArticlesArticleIDAlistokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArticlesArticleIDAlistokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetArticlesArticleIDAlistoken",
		Method:             "GET",
		PathPattern:        "/articles/{article_id}/alistoken",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArticlesArticleIDAlistokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArticlesArticleIDAlistokenOK), nil

}

/*
GetArticlesArticleIDComments 指定された article_id の記事のコメントの一覧を取得する
*/
func (a *Client) GetArticlesArticleIDComments(params *GetArticlesArticleIDCommentsParams) (*GetArticlesArticleIDCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArticlesArticleIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetArticlesArticleIDComments",
		Method:             "GET",
		PathPattern:        "/articles/{article_id}/comments",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArticlesArticleIDCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArticlesArticleIDCommentsOK), nil

}

/*
GetArticlesArticleIDLikes 指定された article_id の記事の「いいね」数を取得
*/
func (a *Client) GetArticlesArticleIDLikes(params *GetArticlesArticleIDLikesParams) (*GetArticlesArticleIDLikesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArticlesArticleIDLikesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetArticlesArticleIDLikes",
		Method:             "GET",
		PathPattern:        "/articles/{article_id}/likes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArticlesArticleIDLikesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArticlesArticleIDLikesOK), nil

}

/*
GetArticlesPopular 人気記事一覧情報を取得
*/
func (a *Client) GetArticlesPopular(params *GetArticlesPopularParams) (*GetArticlesPopularOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArticlesPopularParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetArticlesPopular",
		Method:             "GET",
		PathPattern:        "/articles/popular",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArticlesPopularReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArticlesPopularOK), nil

}

/*
GetArticlesRecent 最新記事一覧情報を取得
*/
func (a *Client) GetArticlesRecent(params *GetArticlesRecentParams) (*GetArticlesRecentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArticlesRecentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetArticlesRecent",
		Method:             "GET",
		PathPattern:        "/articles/recent",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArticlesRecentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetArticlesRecentOK), nil

}

/*
GetCommentsCommentIDLikes 指定されたコメントに付与されているいいね数を取得する
*/
func (a *Client) GetCommentsCommentIDLikes(params *GetCommentsCommentIDLikesParams) (*GetCommentsCommentIDLikesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommentsCommentIDLikesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCommentsCommentIDLikes",
		Method:             "GET",
		PathPattern:        "/comments/{comment_id}/likes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCommentsCommentIDLikesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommentsCommentIDLikesOK), nil

}

/*
GetMeArticlesArticleIDCommentsLikes 指定された記事のコメントの中で、自分がいいねを実行したコメントのIDの一覧を取得する
*/
func (a *Client) GetMeArticlesArticleIDCommentsLikes(params *GetMeArticlesArticleIDCommentsLikesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeArticlesArticleIDCommentsLikesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeArticlesArticleIDCommentsLikesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeArticlesArticleIDCommentsLikes",
		Method:             "GET",
		PathPattern:        "/me/articles/{article_id}/comments/likes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeArticlesArticleIDCommentsLikesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeArticlesArticleIDCommentsLikesOK), nil

}

/*
GetMeArticlesArticleIDDrafts 指定されたIDの下書き記事取得を取得
*/
func (a *Client) GetMeArticlesArticleIDDrafts(params *GetMeArticlesArticleIDDraftsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeArticlesArticleIDDraftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeArticlesArticleIDDraftsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeArticlesArticleIDDrafts",
		Method:             "GET",
		PathPattern:        "/me/articles/{article_id}/drafts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeArticlesArticleIDDraftsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeArticlesArticleIDDraftsOK), nil

}

/*
GetMeArticlesArticleIDLike 指定された article_id の記事に「いいね」を行ったかを確認
*/
func (a *Client) GetMeArticlesArticleIDLike(params *GetMeArticlesArticleIDLikeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeArticlesArticleIDLikeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeArticlesArticleIDLikeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeArticlesArticleIDLike",
		Method:             "GET",
		PathPattern:        "/me/articles/{article_id}/like",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeArticlesArticleIDLikeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeArticlesArticleIDLikeOK), nil

}

/*
GetMeArticlesArticleIDPublic 指定された article_id の公開記事情報を取得
*/
func (a *Client) GetMeArticlesArticleIDPublic(params *GetMeArticlesArticleIDPublicParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeArticlesArticleIDPublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeArticlesArticleIDPublicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeArticlesArticleIDPublic",
		Method:             "GET",
		PathPattern:        "/me/articles/{article_id}/public",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeArticlesArticleIDPublicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeArticlesArticleIDPublicOK), nil

}

/*
GetMeArticlesArticleIDPublicEdit 指定された article_id の編集記事情報を取得
*/
func (a *Client) GetMeArticlesArticleIDPublicEdit(params *GetMeArticlesArticleIDPublicEditParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeArticlesArticleIDPublicEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeArticlesArticleIDPublicEditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeArticlesArticleIDPublicEdit",
		Method:             "GET",
		PathPattern:        "/me/articles/{article_id}/public/edit",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeArticlesArticleIDPublicEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeArticlesArticleIDPublicEditOK), nil

}

/*
GetMeArticlesDrafts 下書き記事一覧情報を取得
*/
func (a *Client) GetMeArticlesDrafts(params *GetMeArticlesDraftsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeArticlesDraftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeArticlesDraftsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeArticlesDrafts",
		Method:             "GET",
		PathPattern:        "/me/articles/drafts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeArticlesDraftsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeArticlesDraftsOK), nil

}

/*
GetMeArticlesPublic 公開記事一覧情報を取得
*/
func (a *Client) GetMeArticlesPublic(params *GetMeArticlesPublicParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeArticlesPublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeArticlesPublicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeArticlesPublic",
		Method:             "GET",
		PathPattern:        "/me/articles/public",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeArticlesPublicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeArticlesPublicOK), nil

}

/*
GetMeInfo ログインユーザ情報を取得
*/
func (a *Client) GetMeInfo(params *GetMeInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInfo",
		Method:             "GET",
		PathPattern:        "/me/info",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInfoOK), nil

}

/*
GetMeNotifications ログインユーザーの通知の一覧を取得
*/
func (a *Client) GetMeNotifications(params *GetMeNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeNotifications",
		Method:             "GET",
		PathPattern:        "/me/notifications",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeNotificationsOK), nil

}

/*
GetMeUnreadNotificationManagers ログインユーザーの通知の未読情報を取得
*/
func (a *Client) GetMeUnreadNotificationManagers(params *GetMeUnreadNotificationManagersParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeUnreadNotificationManagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeUnreadNotificationManagersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeUnreadNotificationManagers",
		Method:             "GET",
		PathPattern:        "/me/unread_notification_managers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeUnreadNotificationManagersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeUnreadNotificationManagersOK), nil

}

/*
GetMeWalletBalance ログインユーザ情報を取得
*/
func (a *Client) GetMeWalletBalance(params *GetMeWalletBalanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeWalletBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeWalletBalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeWalletBalance",
		Method:             "GET",
		PathPattern:        "/me/wallet/balance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeWalletBalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeWalletBalanceOK), nil

}

/*
GetSearchArticles 記事検索
*/
func (a *Client) GetSearchArticles(params *GetSearchArticlesParams) (*GetSearchArticlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchArticlesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchArticles",
		Method:             "GET",
		PathPattern:        "/search/articles",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSearchArticlesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchArticlesOK), nil

}

/*
GetSearchUsers ユーザー検索
*/
func (a *Client) GetSearchUsers(params *GetSearchUsersParams) (*GetSearchUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchUsers",
		Method:             "GET",
		PathPattern:        "/search/users",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSearchUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchUsersOK), nil

}

/*
GetTopics トピックの一覧を取得
*/
func (a *Client) GetTopics(params *GetTopicsParams) (*GetTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTopics",
		Method:             "GET",
		PathPattern:        "/topics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTopicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopicsOK), nil

}

/*
GetUsersUserIDArticlesPublic 指定されたユーザーの公開記事一覧情報を取得
*/
func (a *Client) GetUsersUserIDArticlesPublic(params *GetUsersUserIDArticlesPublicParams) (*GetUsersUserIDArticlesPublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDArticlesPublicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDArticlesPublic",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/articles/public",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDArticlesPublicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDArticlesPublicOK), nil

}

/*
GetUsersUserIDInfo 指定されたユーザーのユーザ情報を取得
*/
func (a *Client) GetUsersUserIDInfo(params *GetUsersUserIDInfoParams) (*GetUsersUserIDInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersUserIDInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersUserIDInfo",
		Method:             "GET",
		PathPattern:        "/users/{user_id}/info",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersUserIDInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersUserIDInfoOK), nil

}

/*
PostMeArticlesArticleIDComments 指定された article_id の記事に対してコメントを登録する
*/
func (a *Client) PostMeArticlesArticleIDComments(params *PostMeArticlesArticleIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeArticlesArticleIDCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeArticlesArticleIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeArticlesArticleIDComments",
		Method:             "POST",
		PathPattern:        "/me/articles/{article_id}/comments",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeArticlesArticleIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeArticlesArticleIDCommentsOK), nil

}

/*
PostMeArticlesArticleIDFraud 対象記事に不正報告を行う
*/
func (a *Client) PostMeArticlesArticleIDFraud(params *PostMeArticlesArticleIDFraudParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeArticlesArticleIDFraudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeArticlesArticleIDFraudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeArticlesArticleIDFraud",
		Method:             "POST",
		PathPattern:        "/me/articles/{article_id}/fraud",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeArticlesArticleIDFraudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeArticlesArticleIDFraudOK), nil

}

/*
PostMeArticlesArticleIDImages 対象記事に画像データを登録
*/
func (a *Client) PostMeArticlesArticleIDImages(params *PostMeArticlesArticleIDImagesParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeArticlesArticleIDImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeArticlesArticleIDImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeArticlesArticleIDImages",
		Method:             "POST",
		PathPattern:        "/me/articles/{article_id}/images",
		ProducesMediaTypes: []string{"application/json application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeArticlesArticleIDImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeArticlesArticleIDImagesOK), nil

}

/*
PostMeArticlesArticleIDLike 対象記事に「いいね」を行う
*/
func (a *Client) PostMeArticlesArticleIDLike(params *PostMeArticlesArticleIDLikeParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeArticlesArticleIDLikeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeArticlesArticleIDLikeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeArticlesArticleIDLike",
		Method:             "POST",
		PathPattern:        "/me/articles/{article_id}/like",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeArticlesArticleIDLikeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeArticlesArticleIDLikeOK), nil

}

/*
PostMeArticlesArticleIDPv 対象記事の閲覧をカウント
*/
func (a *Client) PostMeArticlesArticleIDPv(params *PostMeArticlesArticleIDPvParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeArticlesArticleIDPvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeArticlesArticleIDPvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeArticlesArticleIDPv",
		Method:             "POST",
		PathPattern:        "/me/articles/{article_id}/pv",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeArticlesArticleIDPvReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeArticlesArticleIDPvOK), nil

}

/*
PostMeArticlesDrafts 下書き記事を作成
*/
func (a *Client) PostMeArticlesDrafts(params *PostMeArticlesDraftsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeArticlesDraftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeArticlesDraftsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeArticlesDrafts",
		Method:             "POST",
		PathPattern:        "/me/articles/drafts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeArticlesDraftsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeArticlesDraftsOK), nil

}

/*
PostMeCommentsCommentIDLikes 指定されたコメントに対していいねする
*/
func (a *Client) PostMeCommentsCommentIDLikes(params *PostMeCommentsCommentIDLikesParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeCommentsCommentIDLikesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeCommentsCommentIDLikesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeCommentsCommentIDLikes",
		Method:             "POST",
		PathPattern:        "/me/comments/{comment_id}/likes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeCommentsCommentIDLikesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeCommentsCommentIDLikesOK), nil

}

/*
PostMeInfoIcon ユーザアイコンを登録
*/
func (a *Client) PostMeInfoIcon(params *PostMeInfoIconParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeInfoIconOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeInfoIconParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeInfoIcon",
		Method:             "POST",
		PathPattern:        "/me/info/icon",
		ProducesMediaTypes: []string{"application/json application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeInfoIconReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeInfoIconOK), nil

}

/*
PutMeArticlesArticleIDDrafts 下書き記事を更新
*/
func (a *Client) PutMeArticlesArticleIDDrafts(params *PutMeArticlesArticleIDDraftsParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeArticlesArticleIDDraftsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeArticlesArticleIDDraftsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeArticlesArticleIDDrafts",
		Method:             "PUT",
		PathPattern:        "/me/articles/{article_id}/drafts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeArticlesArticleIDDraftsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeArticlesArticleIDDraftsOK), nil

}

/*
PutMeArticlesArticleIDDraftsPublish 指定された article_id の下書き記事を公開
*/
func (a *Client) PutMeArticlesArticleIDDraftsPublish(params *PutMeArticlesArticleIDDraftsPublishParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeArticlesArticleIDDraftsPublishOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeArticlesArticleIDDraftsPublishParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeArticlesArticleIDDraftsPublish",
		Method:             "PUT",
		PathPattern:        "/me/articles/{article_id}/drafts/publish",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeArticlesArticleIDDraftsPublishReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeArticlesArticleIDDraftsPublishOK), nil

}

/*
PutMeArticlesArticleIDPublic 指定された article_id の編集記事情報を上書き
*/
func (a *Client) PutMeArticlesArticleIDPublic(params *PutMeArticlesArticleIDPublicParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeArticlesArticleIDPublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeArticlesArticleIDPublicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeArticlesArticleIDPublic",
		Method:             "PUT",
		PathPattern:        "/me/articles/{article_id}/public",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeArticlesArticleIDPublicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeArticlesArticleIDPublicOK), nil

}

/*
PutMeArticlesArticleIDPublicRepublish 指定された article_id の編集記事を公開する
*/
func (a *Client) PutMeArticlesArticleIDPublicRepublish(params *PutMeArticlesArticleIDPublicRepublishParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeArticlesArticleIDPublicRepublishOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeArticlesArticleIDPublicRepublishParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeArticlesArticleIDPublicRepublish",
		Method:             "PUT",
		PathPattern:        "/me/articles/{article_id}/public/republish",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeArticlesArticleIDPublicRepublishReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeArticlesArticleIDPublicRepublishOK), nil

}

/*
PutMeArticlesArticleIDPublicUnpublish 指定された article_id の公開記事を下書きに戻す
*/
func (a *Client) PutMeArticlesArticleIDPublicUnpublish(params *PutMeArticlesArticleIDPublicUnpublishParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeArticlesArticleIDPublicUnpublishOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeArticlesArticleIDPublicUnpublishParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeArticlesArticleIDPublicUnpublish",
		Method:             "PUT",
		PathPattern:        "/me/articles/{article_id}/public/unpublish",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeArticlesArticleIDPublicUnpublishReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeArticlesArticleIDPublicUnpublishOK), nil

}

/*
PutMeInfo ユーザ情報を更新
*/
func (a *Client) PutMeInfo(params *PutMeInfoParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeInfo",
		Method:             "PUT",
		PathPattern:        "/me/info",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeInfoOK), nil

}

/*
PutMeUnreadNotificationManagers ログインユーザーの通知の未読情報を未読に更新する
*/
func (a *Client) PutMeUnreadNotificationManagers(params *PutMeUnreadNotificationManagersParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeUnreadNotificationManagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeUnreadNotificationManagersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeUnreadNotificationManagers",
		Method:             "PUT",
		PathPattern:        "/me/unread_notification_managers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeUnreadNotificationManagersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeUnreadNotificationManagersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
